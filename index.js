/**
 * Chrome Extension Test Framework
 * Ê±éÁî®ÁöÑ„Å™ChromeÊã°ÂºµÊ©üËÉΩ„ÉÜ„Çπ„Éà„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ
 */

const TestRunner = require('./lib/TestRunner');
const TestSuite = require('./lib/TestSuite');
const TestCase = require('./lib/TestCase');
const Validator = require('./lib/Validator');
const Reporter = require('./lib/Reporter');
const ConfigLoader = require('./lib/ConfigLoader');

// „Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥
const VERSION = '1.0.0';

// „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö
const DEFAULT_CONFIG = {
    // „ÉÜ„Çπ„ÉàÂØæË±°„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™
    extensionPath: process.cwd(),
    
    // Âá∫ÂäõË®≠ÂÆö
    output: {
        format: ['console', 'json', 'html'],
        directory: './test-results',
        filename: 'test-report'
    },
    
    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö
    validation: {
        manifest: true,
        permissions: true,
        csp: true,
        icons: true,
        locales: true
    },
    
    // „Ç´„Çπ„Çø„É†„É´„Éº„É´
    rules: [],
    
    // „Éó„É©„Ç∞„Ç§„É≥
    plugins: [],
    
    // ‰∏¶ÂàóÂÆüË°å
    parallel: false,
    
    // „Çø„Ç§„É†„Ç¢„Ç¶„Éà
    timeout: 30000
};

/**
 * „É°„Ç§„É≥„ÅÆ„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÇØ„É©„Çπ
 */
class ChromeExtensionTestFramework {
    constructor(config = {}) {
        this.config = { ...DEFAULT_CONFIG, ...config };
        this.configLoader = new ConfigLoader();
        this.testRunner = new TestRunner(this.config);
        this.reporter = new Reporter(this.config);
        this.suites = [];
    }

    /**
     * Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Åã„ÇâË™≠„ÅøËæº„Åø
     */
    async loadConfig(configPath) {
        const loadedConfig = await this.configLoader.load(configPath);
        this.config = { ...this.config, ...loadedConfig };
        this.testRunner.updateConfig(this.config);
        return this;
    }

    /**
     * „ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„Éà„ÇíËøΩÂä†
     */
    addSuite(suite) {
        if (suite instanceof TestSuite) {
            this.suites.push(suite);
        } else if (typeof suite === 'object') {
            // „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åã„ÇâTestSuite„Çí‰ΩúÊàê
            this.suites.push(new TestSuite(suite));
        }
        return this;
    }

    /**
     * „Éì„É´„Éà„Ç§„É≥„ÉÜ„Çπ„Éà„ÇíËøΩÂä†
     */
    useBuiltinTests() {
        const builtinSuites = [
            require('./suites/ManifestTestSuite'),
            require('./suites/SecurityTestSuite'),
            require('./suites/PerformanceTestSuite'),
            require('./suites/StructureTestSuite'),
            require('./suites/LocalizationTestSuite')
        ];

        builtinSuites.forEach(Suite => {
            this.addSuite(new Suite(this.config));
        });

        return this;
    }

    /**
     * „Éó„É©„Ç∞„Ç§„É≥„Çí‰ΩøÁî®
     */
    use(plugin) {
        if (typeof plugin === 'function') {
            plugin(this);
        } else if (plugin.install) {
            plugin.install(this);
        }
        return this;
    }

    /**
     * „Ç´„Çπ„Çø„É†„Éê„É™„Éá„Éº„Çø„Éº„ÇíËøΩÂä†
     */
    addValidator(name, validator) {
        Validator.register(name, validator);
        return this;
    }

    /**
     * „Ç´„Çπ„Çø„É†„É¨„Éù„Éº„Çø„Éº„ÇíËøΩÂä†
     */
    addReporter(name, reporter) {
        this.reporter.register(name, reporter);
        return this;
    }

    /**
     * „ÉÜ„Çπ„Éà„ÇíÂÆüË°å
     */
    async run() {
        console.log(`üöÄ Chrome Extension Test Framework v${VERSION}`);
        console.log(`üìÅ Testing: ${this.config.extensionPath}\n`);

        const startTime = Date.now();
        const results = {
            framework: VERSION,
            timestamp: new Date().toISOString(),
            config: this.config,
            suites: []
        };

        try {
            // ÂêÑ„ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„Éà„ÇíÂÆüË°å
            for (const suite of this.suites) {
                const suiteResult = await this.testRunner.runSuite(suite);
                results.suites.push(suiteResult);
            }

            // ÁµêÊûú„ÇíÈõÜË®à
            results.summary = this.calculateSummary(results.suites);
            results.duration = Date.now() - startTime;

            // „É¨„Éù„Éº„Éà„ÇíÁîüÊàê
            await this.reporter.generate(results);

            // ÁµêÊûú„ÇíËøî„Åô
            return results;

        } catch (error) {
            console.error('‚ùå Test execution failed:', error);
            throw error;
        }
    }

    /**
     * ÁµêÊûú„ÇíÈõÜË®à
     */
    calculateSummary(suites) {
        const summary = {
            total: 0,
            passed: 0,
            failed: 0,
            skipped: 0,
            errors: []
        };

        suites.forEach(suite => {
            suite.tests.forEach(test => {
                summary.total++;
                if (test.status === 'passed') summary.passed++;
                else if (test.status === 'failed') summary.failed++;
                else if (test.status === 'skipped') summary.skipped++;
                
                if (test.error) {
                    summary.errors.push({
                        suite: suite.name,
                        test: test.name,
                        error: test.error
                    });
                }
            });
        });

        summary.successRate = summary.total > 0 
            ? Math.round((summary.passed / summary.total) * 100) 
            : 0;

        return summary;
    }

    /**
     * ÈùôÁöÑ„É°„ÇΩ„ÉÉ„Éâ: „ÇØ„Ç§„ÉÉ„ÇØ„ÉÜ„Çπ„Éà
     */
    static async test(extensionPath, options = {}) {
        const framework = new ChromeExtensionTestFramework({
            extensionPath,
            ...options
        });
        
        return framework
            .useBuiltinTests()
            .run();
    }
}

// „Ç®„ÇØ„Çπ„Éù„Éº„Éà
module.exports = ChromeExtensionTestFramework;
module.exports.TestSuite = TestSuite;
module.exports.TestCase = TestCase;
module.exports.Validator = Validator;
module.exports.VERSION = VERSION;